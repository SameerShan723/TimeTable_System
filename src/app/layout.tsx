// app/layout.tsx
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import Sidebar from "@/components/sidebar/page";
import Header from "./header/page";
import { Inter, Roboto } from "next/font/google";
import NextTopLoader from "nextjs-toploader";
import { supabase } from "@/lib/supabase/supabase";
import {
  TimetableData,
  EmptySlot,
  RoomSchedule,
  Session,
} from "@/app/timetable/types";
import { timeSlots, Rooms, Days } from "@/helpers/page";
import { cache } from "react";

// Configure fonts
const inter = Inter({
  subsets: ["latin"],
  display: "swap",
  variable: "--font-inter",
});
const roboto = Roboto({
  weight: ["400", "700"],
  subsets: ["latin"],
  display: "swap",
  variable: "--font-roboto",
});
const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});
const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

interface SupabaseVersion {
  version_number: number;
}

// Cache Supabase queries
const fetchVersions = cache(async () => {
  const { data, error } = await supabase
    .from("timetable_data")
    .select("version_number")
    .order("version_number", { ascending: true });
  return { data, error };
});

const fetchTimetableData = cache(async (version: number) => {
  const { data, error } = await supabase
    .from("timetable_data")
    .select("data")
    .eq("version_number", version)
    .maybeSingle();
  return { data, error };
});

const normalizeData = (rawData: unknown): TimetableData => {
  const normalized: TimetableData = Days.reduce(
    (acc, day) => ({ ...acc, [day]: [] }),
    {} as TimetableData
  );

  if (typeof rawData !== "object" || rawData === null) {
    return normalized;
  }

  Days.forEach((day) => {
    const daySchedule: RoomSchedule[] =
      day in rawData && Array.isArray((rawData as Record<string, unknown>)[day])
        ? ((rawData as Record<string, unknown>)[day] as RoomSchedule[])
        : [];

    const validRooms: RoomSchedule[] = daySchedule
      .map((roomObj: unknown) => {
        if (typeof roomObj !== "object" || roomObj === null) {
          return null;
        }

        const keys = Object.keys(roomObj);
        if (keys.length === 0) {
          return null;
        }

        const roomName = keys[0];
        if (!Rooms.includes(roomName)) {
          return null;
        }

        const sessions: unknown[] =
          typeof (roomObj as Record<string, unknown>)[roomName] === "object" &&
          Array.isArray((roomObj as Record<string, unknown>)[roomName])
            ? ((roomObj as Record<string, unknown>)[roomName] as unknown[])
            : [];

        const roomSchedule: RoomSchedule = {};
        roomSchedule[roomName] = timeSlots.map((time, index) => {
          const session = sessions[index];
          if (
            session &&
            typeof session === "object" &&
            "Teacher" in session &&
            "Subject" in session
          ) {
            return {
              Room: roomName,
              Time: time,
              Teacher:
                typeof (session as Record<string, unknown>).Teacher === "string"
                  ? (session as Record<string, unknown>).Teacher
                  : "",
              Subject:
                typeof (session as Record<string, unknown>).Subject === "string"
                  ? (session as Record<string, unknown>).Subject
                  : "",
              Domain:
                typeof (session as Record<string, unknown>).Domain === "string"
                  ? (session as Record<string, unknown>).Domain
                  : undefined,
              Section:
                typeof (session as Record<string, unknown>).Section === "string"
                  ? (session as Record<string, unknown>).Section
                  : undefined,
            } as Session;
          }
          return { Time: time } as EmptySlot;
        });

        return roomSchedule;
      })
      .filter((roomObj): roomObj is RoomSchedule => roomObj !== null);

    normalized[day] = validRooms;
  });

  return normalized;
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  // Fetch initial timetable data
  const { data: versionData, error: versionError } = await fetchVersions();
  let versions: number[] = [];
  let selectedVersion: number | undefined;
  let timetableData: TimetableData = Days.reduce(
    (acc, day) => ({
      ...acc,
      [day]: Rooms.map((room) => ({
        [room]: timeSlots.map((time) => ({ Time: time } as EmptySlot)),
      })),
    }),
    {} as TimetableData
  );

  if (!versionError && versionData && versionData.length > 0) {
    versions = versionData.map((v: SupabaseVersion) => v.version_number);
    selectedVersion = versions[versions.length - 1];

    const { data, error } = await fetchTimetableData(selectedVersion);
    if (!error && data?.data) {
      timetableData = normalizeData(data.data);
    }
  } else {
    // Initialize default data if no versions exist
    const { error: insertError } = await supabase
      .from("timetable_data")
      .insert({ version_number: 1, data: timetableData });

    if (!insertError) {
      versions = [1];
      selectedVersion = 1;
    }
  }

  return (
    <html lang="en" className={`${inter.variable} ${roboto.variable}`}>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <NextTopLoader
          showSpinner={false}
          color="#3b82f6"
          height={3}
          crawlSpeed={300}
        />
        <div className="h-16 sticky top-0 z-50 shadow-xl">
          <Header />
        </div>

        <div className="flex flex-col md:flex-row h-[calc(100vh-4rem)]">
          <div className="w-full md:w-60 md:h-full flex-shrink-0">
            <Sidebar />
          </div>

          <div className="flex-1 h-full overflow-x-auto">{children}</div>
        </div>
      </body>
    </html>
  );
}
